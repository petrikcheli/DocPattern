#include "templateeditpage.h"
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QFile>
#include <QTextCursor>
#include <QTextDocumentFragment>

TemplateEditPage::TemplateEditPage(QWidget *parent)
    : QWidget{parent}
{
    pythonWorker = std::make_unique<PythonWorker>(QDir(QCoreApplication::applicationDirPath()).absoluteFilePath("python"));

    createRuleButton = new QPushButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ", this);
    saveButton = new QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", this);
    backButton = new QPushButton("–ù–∞–∑–∞–¥", this);
    textBrowserFile = new QTextBrowser(this);
    listRules = new QListWidget(this);

    // === –õ–µ–≤–∞—è —á–∞—Å—Ç—å: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ (–∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –º–µ—Å—Ç–æ) ===
    auto *leftLayout = new QVBoxLayout();
    leftLayout->addWidget(textBrowserFile);

    // === –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª (—É–∑–∫–∏–π —Å—Ç–æ–ª–±–µ—Ü) ===
    auto *rightLayout = new QVBoxLayout();
    rightLayout->addWidget(listRules);

    // –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
    listRules->setMaximumWidth(100);

    // === –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (–ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞) ===
    auto *topLayout = new QHBoxLayout();
    topLayout->addLayout(leftLayout, 3);   // –≤–µ—Å 3 ‚Üí –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞
    topLayout->addLayout(rightLayout, 1);  // –≤–µ—Å 1 ‚Üí —É–∂–µ

    // === –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ ===
    auto *bottomLayout = new QHBoxLayout();
    bottomLayout->addWidget(backButton);
    bottomLayout->addStretch(); // —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∂–∞–ª–∏—Å—å –≤–ø—Ä–∞–≤–æ
    bottomLayout->addWidget(createRuleButton);
    bottomLayout->addWidget(saveButton);

    // === –ì–ª–∞–≤–Ω—ã–π layout ===
    auto *mainLayout = new QVBoxLayout(this);
    mainLayout->addLayout(topLayout);
    mainLayout->addLayout(bottomLayout);
    mainLayout->setStretch(0, 1); // –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
    mainLayout->setStretch(1, 0); // –Ω–∏–∂–Ω—è—è ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è

    setLayout(mainLayout);

    // –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç–∞–Ω–∏—Ü—É
    connect(saveButton, &QPushButton::clicked, this, &TemplateEditPage::saveSelectedText);

    // –≤–µ–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª–∞
    connect(createRuleButton, &QPushButton::clicked, this, &TemplateEditPage::createRuleButtonSlot);

    // –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ —Å –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π (–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)
    connect(backButton, &QPushButton::clicked, this, &TemplateEditPage::cancelCreation);

    //QTextEdit *editor = new QTextEdit(this);
    //–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫—É–¥–∞-—Ç–æ File
    //–ü–æ—Ç–æ–º –º–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ html
    //–∏ –ø–æ—Ç–æ–º –≤—ã–≤–æ–¥–∏–º

    // copyFileToNewDir();
    // convertDocxToHtml();


    // QFile file(fileName);
    // file.open(QIODevice::ReadOnly);
    // textBrowserFile->setHtml(file.readAll());
}

void TemplateEditPage::setFilePath(const QString &path)
{
    filePath = path;
    qDebug() << "filePath = " << path;
    fileName = filePath.split("/").back();

    copyFileToNewDir();
    QString dirHtml = convertDocxToHtml();


    QFile file(dirHtml);
    file.open(QIODevice::ReadOnly);
    textBrowserFile->setHtml(file.readAll());
}

QString TemplateEditPage::convertDocxToHtml()
{
    //–¢—É—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å python —Å–∫—Ä–∏–ø—Ç
    // –ü—Ä–∏–º–µ—Ä 1 ‚Äî –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    QString dirDocx = QString::fromStdString(dirTemplates) + "/" + fileName.split('.').first() + "/" + fileName;
    QString dirHtml = QString::fromStdString(dirTemplates) + "/" + fileName.split('.').first() + "/" + fileName.split('.').first() + ".html";

    pythonWorker->runFirstScript({dirDocx, dirHtml});

    return dirHtml;
}

void TemplateEditPage::copyFileToNewDir()
{
    try {
        fs::path baseDir = dirTemplates;
        subDir = baseDir / fileName.split('.').begin()->toStdString();

        fs::create_directories(subDir);

        qDebug() << "–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞";

        fs::path source = filePath.toStdString();
        fs::path destination = subDir / fileName.toStdString();

        // qDebug() << "source = " << source.string();
        // qDebug() << "destination = " << destination.string();

        try {
            fs::copy_file(source, destination, fs::copy_options::overwrite_existing);
            qDebug() << "—Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω";
        } catch(const fs::filesystem_error &e){
            qDebug() << "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: " << e.what();
        }

    } catch (const fs::filesystem_error &e) {
        qDebug() << "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: " << e.what();
    }

}

void TemplateEditPage::saveSelectedText()
{
    return;
}

void TemplateEditPage::createRuleButtonSlot()
{
    QTextCursor cursor = textBrowserFile->textCursor();
    selectText = cursor.selectedText();

    startPosSelectText = cursor.selectionStart();
    endPosSelectText = cursor.selectionEnd();

    if(selectText.isEmpty()) {
        qDebug() << "–¢–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω";
        return;
    }
    qDebug() << "–¢–µ–∫—Å—Ç - " << selectText;
    qDebug() << "–ù–∞—á–∞–ª–æ: " << startPosSelectText << " –ö–æ–Ω–µ—Ü: " << endPosSelectText;
    auto newRule = std::make_shared<TemplateRule>();
    newRule->text_to_replace = selectText.toStdString();
    newRule->text_position = startPosSelectText;
    rules.push_back(newRule);

    emit ruleSelected(newRule);
    emit createRuleButtonClicked();
}

void TemplateEditPage::cancelCreation()
{
    //TODO: —Ç—É—Ç –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    //(—Å–µ–π—á–∞—Å —è –Ω–µ –±—É–¥—É —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º —Ñ–∞–π–ª–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å—Å—è –ø–∞–ø–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞)
    emit backButtonClicked();
    return;
}

void TemplateEditPage::updateRuleList()
{
    listRules->clear();

    for (int i = 0; i < rules.size(); ++i) {
        auto rule = rules[i];

        // === –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ===
        QWidget *itemWidget = new QWidget();

        // === –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ ===
        QLabel *ruleLabel = new QLabel(QString::fromStdString(rule->text_to_replace), itemWidget);
        ruleLabel->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);

        // === –ö–Ω–æ–ø–∫–∏ ===
        QPushButton *editButton = new QPushButton("‚úèÔ∏è", itemWidget);
        QPushButton *deleteButton = new QPushButton("üóëÔ∏è", itemWidget);
        editButton->setFixedWidth(32);
        deleteButton->setFixedWidth(32);

        // === –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ===
        QHBoxLayout *layout = new QHBoxLayout(itemWidget);
        layout->addWidget(ruleLabel);
        layout->addWidget(editButton);
        layout->addWidget(deleteButton);
        layout->setContentsMargins(4, 2, 4, 2);

        // === –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ ===
        QListWidgetItem *item = new QListWidgetItem(listRules);
        item->setSizeHint(itemWidget->sizeHint());
        listRules->addItem(item);
        listRules->setItemWidget(item, itemWidget);

        // === –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫–Ω–æ–ø–æ–∫ ===
        connect(editButton, &QPushButton::clicked, this, [this, i]() {
            emit editRuleRequested(rules[i]);
        });

        connect(deleteButton, &QPushButton::clicked, this, [this, i]() {
            rules.erase(rules.begin() + i);
            updateRuleList();
        });
    }
}

